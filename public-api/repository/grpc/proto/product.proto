syntax = "proto3";

package product;
option go_package = "./product";

message ListKeyProductServiceRequest {
  string id = 1;
  string id_product = 2;
  string number_keys = 3;
  string status = 4;

}

message ListKeyProductServiceResponse {
  int64 id = 1;
  int64 id_product = 2;
  string number_keys = 3;
  string status = 4;
}


message ListKeyBulkResponse {
  repeated ListKeyProductServiceResponse data = 1;
}

message UpdateListKeyStatusProductServiceRequest{
  string ListID = 1;
  string Status = 2;
}

message UpdateListKeyStatusProductServiceResponse{
  string response = 1;
}

message ListKeyProductByProductIDAndLimitServiceRequest {
  string id_product = 1;
  string limit = 2;
}

message ProductIDRequestServiceRequest{
  int64 id = 1;
}

message DetailProductServiceResponse{
  int64 id = 1;
  int64 product_id = 2;
  string name = 3;
  string sku = 4;
  string tipe = 5;
  string description = 6;
  int64 stok = 7;
  string duration = 8;
  string price = 9;
  string discount = 10;
  string tax = 11;
  string final_price = 12;
  string dtm_crt = 13;
  string dtm_up = 14;
}

message RequestAdditionalData {
  int32 page = 1;
  int32 limit = 2;
  int32 id = 3;
  int32 fk_1 = 4;
  string fk_2 = 5;
  string fk_3 = 6;
  string name_search = 7;
  string order = 8;
  string sort = 9;
  string custom_column = 10;
}

message MetaData {
  uint32 total_data = 1;
  uint32 total_page = 2;
  uint32 page = 3;
  uint32 limit = 4;
  string sort = 5;
  string order = 6;
}

message ProductDetail {
  int64 id = 1;
  int32 stok = 2;
  string duration = 3;
  double price = 4;
  int32 tax = 5;
  double final_price = 6;
  // 'discount' is marked as optional because it is a pointer in Go
  int32 discount = 7 [json_name = "discount"];
}

message ProductResponseDTO {
  string id = 1;
  string name = 2;
  string sku = 3;
  string tipe = 4;
  string desc = 5;
  repeated ProductDetail detail_product = 6;
  string dtm_crt = 7 [json_name = "dtm_crt"];
  string dtm_upd = 8;
}

message GetAllProductResponse {
  MetaData meta_data = 1;
  repeated ProductResponseDTO data = 2;
}

service ProductService {
  rpc GetListKeyProduct(ListKeyProductServiceRequest) returns (ListKeyBulkResponse) {};
  rpc UpdateListKeyStatusProduct(UpdateListKeyStatusProductServiceRequest) returns (UpdateListKeyStatusProductServiceResponse) {};
  rpc GetListKeyProductByProductIDAndLimit(ListKeyProductByProductIDAndLimitServiceRequest) returns (ListKeyBulkResponse) {};
  rpc GetProductByID(ProductIDRequestServiceRequest) returns (DetailProductServiceResponse) {};
  rpc GetAllProduct(RequestAdditionalData) returns (GetAllProductResponse);
}
