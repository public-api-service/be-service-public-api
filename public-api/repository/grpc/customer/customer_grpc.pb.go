// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc1
// source: public-api/repository/grpc/proto/customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerUseCaseServiceClient is the client API for CustomerUseCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerUseCaseServiceClient interface {
	PostCustomer(ctx context.Context, in *RequestDataCustomer, opts ...grpc.CallOption) (*EmptyResponse, error)
	PostCheckout(ctx context.Context, in *RequestDataCheckout, opts ...grpc.CallOption) (*EmptyResponse, error)
	CheckStok(ctx context.Context, in *RequestCheckStok, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type customerUseCaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerUseCaseServiceClient(cc grpc.ClientConnInterface) CustomerUseCaseServiceClient {
	return &customerUseCaseServiceClient{cc}
}

func (c *customerUseCaseServiceClient) PostCustomer(ctx context.Context, in *RequestDataCustomer, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerUseCaseService/PostCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerUseCaseServiceClient) PostCheckout(ctx context.Context, in *RequestDataCheckout, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerUseCaseService/PostCheckout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerUseCaseServiceClient) CheckStok(ctx context.Context, in *RequestCheckStok, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerUseCaseService/CheckStok", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerUseCaseServiceServer is the server API for CustomerUseCaseService service.
// All implementations must embed UnimplementedCustomerUseCaseServiceServer
// for forward compatibility
type CustomerUseCaseServiceServer interface {
	PostCustomer(context.Context, *RequestDataCustomer) (*EmptyResponse, error)
	PostCheckout(context.Context, *RequestDataCheckout) (*EmptyResponse, error)
	CheckStok(context.Context, *RequestCheckStok) (*EmptyResponse, error)
	mustEmbedUnimplementedCustomerUseCaseServiceServer()
}

// UnimplementedCustomerUseCaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerUseCaseServiceServer struct {
}

func (UnimplementedCustomerUseCaseServiceServer) PostCustomer(context.Context, *RequestDataCustomer) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCustomer not implemented")
}
func (UnimplementedCustomerUseCaseServiceServer) PostCheckout(context.Context, *RequestDataCheckout) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCheckout not implemented")
}
func (UnimplementedCustomerUseCaseServiceServer) CheckStok(context.Context, *RequestCheckStok) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStok not implemented")
}
func (UnimplementedCustomerUseCaseServiceServer) mustEmbedUnimplementedCustomerUseCaseServiceServer() {
}

// UnsafeCustomerUseCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerUseCaseServiceServer will
// result in compilation errors.
type UnsafeCustomerUseCaseServiceServer interface {
	mustEmbedUnimplementedCustomerUseCaseServiceServer()
}

func RegisterCustomerUseCaseServiceServer(s grpc.ServiceRegistrar, srv CustomerUseCaseServiceServer) {
	s.RegisterService(&CustomerUseCaseService_ServiceDesc, srv)
}

func _CustomerUseCaseService_PostCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataCustomer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerUseCaseServiceServer).PostCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerUseCaseService/PostCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerUseCaseServiceServer).PostCustomer(ctx, req.(*RequestDataCustomer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerUseCaseService_PostCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataCheckout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerUseCaseServiceServer).PostCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerUseCaseService/PostCheckout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerUseCaseServiceServer).PostCheckout(ctx, req.(*RequestDataCheckout))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerUseCaseService_CheckStok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCheckStok)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerUseCaseServiceServer).CheckStok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerUseCaseService/CheckStok",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerUseCaseServiceServer).CheckStok(ctx, req.(*RequestCheckStok))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerUseCaseService_ServiceDesc is the grpc.ServiceDesc for CustomerUseCaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerUseCaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerUseCaseService",
	HandlerType: (*CustomerUseCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCustomer",
			Handler:    _CustomerUseCaseService_PostCustomer_Handler,
		},
		{
			MethodName: "PostCheckout",
			Handler:    _CustomerUseCaseService_PostCheckout_Handler,
		},
		{
			MethodName: "CheckStok",
			Handler:    _CustomerUseCaseService_CheckStok_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public-api/repository/grpc/proto/customer.proto",
}
