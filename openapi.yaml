openapi: 3.0.0
info:
  title: Open API for Public API Luru Norton Backend
  description: Open API for Public API Luru Norton Backend
  version: 1.0.0

servers:
  - url: http://localhost:8887
    description: "local development"
  - url: https://nortonweb.luru.space/api/v1/public/
    description: "staging development"

paths:
  /auth:
    get:
      summary: Authenticate User with Bearer Token
      description: Authenticate user using a bearer token
      tags:
        - Authentication & Authorization
      security:
        - OAuth2ClientCredentials:
          - write_clients
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessAuth'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /checkout:
    post:
      summary: Save customer data, and checkout
      description: Save customer data, and checkout
      tags:
        - Transaction
      security:
        - OAuth2ClientCredentials:
          - write_clients
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Keys created successfully
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/KeysResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /product:
    get:
      summary: Get All Data Product
      description: Get All Data Product
      tags:
        - Product & Keys
      security:
        - OAuth2ClientCredentials:
          - write_clients
      parameters:
        - name: page
          in: query
          description: Page
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit
          schema:
            type: integer
        - name: order
          in: query
          description: order menggunakan kolom ID sebagai index
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: id
          in: query
          description: UserID
          schema:
            type: integer
        - name: search
          in: query
          description: Search
          schema:
            type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
  /product/{id}:
    get:
      summary: Get Detail Data Product
      description: Get Detail Data Product
      tags:
        - Product & Keys
      security:
        - OAuth2ClientCredentials:
          - write_clients
      parameters:
        - name: id
          in: path
          description: ID Product
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
  /check/stok/{id}:
    get:
      summary: List All Sales
      description: List All Sales
      tags:
        - Transaction
      security:
        - OAuth2ClientCredentials:
          - write_clients
      parameters:
        - name: id
          in: path
          description: ID Product Sales
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessAuth'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
components:
  schemas:
    RequestLogin:
      type: object
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
      required:
        - email
        - password
    ResponseSuccess:
      type: object
      properties:
        user_id:
          type: string
          example: 1
        token:
          type: string
          example: "i1u29ijdbabd9qu82i1313axxjq29n"
        expired:
          type: string
          example: "2023-09-10 22:00"
    ErrorBadRequest:
      type: object
      example: Bad request
    ErrorUnauthorized:
      type: object
      example: Unauthorized request
    ErrorNotFound:
      type: object
      example: DATA NOT FOUND
    ResponseSuccessAuth:
      type: object
      properties:
        user_id:
          type: string
          example: 1
        email:
          type: string
          example: "admin@gmail.com"
        role:
          type: string
          example: "pusat"
        expired:
          type: string
          example: 2023-09-10 22:00
    CustomerRequest:
      type: object
      properties:
        email:
          type: string
          description: Email Customer
        name:
          type: string
          description: Name Customer
        phone_number:
          type: string
          description: Phone Customer
        product_sales_id:
          type: integer
          description: Product ID
        qty:
          type: integer
          description: Total Keys
        total_pricing:
          type: integer
          description: ON IDR
        payment_reference:
          type: string
          description: Payment reference no payment gateway
        type_duration:
          type: string
          description: Jenis Durasi yang dipilih
      required:
        - email
        - name
        - phone_number
        - product_sales_id
        - qty
        - total_pricing
        - payment_reference
        - type_duration
        # - status
  securitySchemes:
    OAuth2ClientCredentials:
      type: oauth2
      description: |-  
        API ini menggunakan OAuth 2.0 dengan flow **Client Credential**. 
        Untuk informasi lebih lanjut bisa pelajari https://www.ory.sh/docs/oauth2-oidc/client-credentials
      flows:
        clientCredentials:
          tokenUrl: /b2b/token
          scopes:
            write_clients: modify clients